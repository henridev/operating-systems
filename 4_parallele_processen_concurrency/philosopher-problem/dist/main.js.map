{"version":3,"sources":["webpack://4_parallele_processen_concurrency/./src/index.ts","webpack://4_parallele_processen_concurrency/./src/animation/implementations.ts","webpack://4_parallele_processen_concurrency/./src/animation/index.ts","webpack://4_parallele_processen_concurrency/./src/constants.ts","webpack://4_parallele_processen_concurrency/./src/controller/index.ts","webpack://4_parallele_processen_concurrency/./src/models/index.ts","webpack://4_parallele_processen_concurrency/./src/typings/data.ts","webpack://4_parallele_processen_concurrency/./src/typings/logger.ts","webpack://4_parallele_processen_concurrency/./src/utils/index.ts","webpack://4_parallele_processen_concurrency/./src/views/index.ts","webpack://4_parallele_processen_concurrency/webpack/bootstrap"],"names":["model","view","controller","drawPhilosopherSelection","ctx","philosopher","border","drawCircleStroke","x","coords","y","radius","RADIUS_PHILOSOPHER","drawPhilosopher","drawCircle","color","getBorderColor","text","name","priority","drawFork","fork","RADIUS_FORK","heldBy","i","params","beginPath","arc","Math","PI","lineWidth","strokeStyle","stroke","font","fillStyle","textAlign","fillText","fill","drawTable","centerX","centerY","R","clearCanvas","clearRect","CANVAS_WIDTH","CANVAS_HEIGHT","Controller","MainController","self","this","canvasClickListener","event","offsetX","offsetY","philosophers","forEach","inCircle","clearPhilosopherSelection","currentPhilosopher","forks","adjacentForkLeft","forkLeft","adjacentForkRight","forkRight","pickUpFork","Sides","LEFT","RIGHT","updatePhilosopherStates","eatButtonClickListener","startEating","Model","observers","interval","undefined","getRandomColor","fullness","isSelected","state","States","HANGRY","side","forkIndex","logger","Action","PICKUP_FORK_ATTEMPT","PICKUP_FROM","FORK_HELD","PICKUP_FREE","notifyObservers","HOLDING_BOTH_FORKS","CAN_EAT","pRefI","findIndex","p","EATING","clearInterval","setInterval","holdingTwoForksCheck","stoptEating","NO_EATING","addPointsToForksAndPhilosophers","holdingRight","holdingRightForkCheck","holdingLeft","holdingLeftForkCheck","updatePhilosopherPriority","HOLDING_LEFT_FORK","HOLDING_RIGHT_FORK","ph","lowestPriority","reduce","acc","cur","max","registerObserver","observer","push","removeObserver","filter","o","update","angle","length","x1","cos","degreesToRadians","y1","sin","x2","y2","_currentPhilosopher","MainModel","degrees","abs","c","hex","floor","random","toString","String","substr","Tag","message","console","log","View","element","document","getElementById","style","backgroundColor","width","height","getContext","globalCompositeOperation","addClickEventListener","handler","addEventListener","id","disabled","innerText","headers","innerHTML","header","createHeader","appendChild","row","createRow","tr","createElement","td","setBackgroundColor","property","MainView","canvas","Canvas","eatButton","EatButton","table","InfoTable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.js","sourcesContent":["import { Controller } from './controller'\nimport { Model } from './models'\nimport { View } from './views'\n\nfunction init() {\n    const model = new Model.MainModel()\n    const view = new View.MainView()\n    const controller = new Controller.MainController(model, view)\n\n    model.registerObserver(view.canvas)\n    model.registerObserver(view.table)\n    model.registerObserver(view.eatButton)\n\n    view.canvas.addClickEventListener(controller.canvasClickListener)\n    view.eatButton.addClickEventListener(controller.eatButtonClickListener)\n}\n\ninit()\n","import { RADIUS_FORK, RADIUS_PHILOSOPHER } from '../constants'\nimport { getBorderColor } from '../utils'\nimport { drawCircle, drawCircleStroke } from '.'\nimport { Fork, Philosopher } from '../typings/data'\n\nexport const drawPhilosopherSelection = (ctx: CanvasRenderingContext2D, philosopher: Philosopher, border = 'green') => {\n    drawCircleStroke(ctx, {\n        x: philosopher.coords.x,\n        y: philosopher.coords.y,\n        radius: RADIUS_PHILOSOPHER,\n        border,\n    })\n}\nexport const drawPhilosopher = (ctx: CanvasRenderingContext2D, philosopher: Philosopher) => {\n    drawCircle(ctx, {\n        x: philosopher.coords.x,\n        y: philosopher.coords.y,\n        radius: RADIUS_PHILOSOPHER,\n        color: philosopher.color,\n        border: getBorderColor(philosopher),\n        text: philosopher.name + ' ' + philosopher.priority,\n    })\n}\nexport const drawFork = (ctx: CanvasRenderingContext2D, fork: Fork, color = 'black') => {\n    drawCircle(ctx, {\n        x: fork.coords.x,\n        y: fork.coords.y,\n        radius: RADIUS_FORK,\n        color: fork.heldBy?.color ?? color,\n        border: 'white',\n        text: `fork ${fork.i}`,\n    })\n}\n","import { CANVAS_HEIGHT, CANVAS_WIDTH, centerX, centerY, R } from '../constants'\nimport { DrawCircleParams, DrawCircleStrokeParams } from '../typings/draw'\n\nexport const drawCircleStroke = (ctx: CanvasRenderingContext2D, params: DrawCircleStrokeParams) => {\n    const { x, y, radius, border } = params\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.lineWidth = 5\n    ctx.strokeStyle = border\n    ctx.stroke()\n}\n\nexport const drawCircle = (ctx: CanvasRenderingContext2D, params: DrawCircleParams) => {\n    const { x, y, radius, color, border, text } = params\n    ctx.beginPath()\n    ctx.font = '8pt Calibri'\n    ctx.fillStyle = 'white'\n    ctx.textAlign = 'center'\n    ctx.fillText(text, x, y + 3)\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.fillStyle = color\n    ctx.fill()\n    ctx.lineWidth = 5\n    ctx.strokeStyle = border\n    ctx.stroke()\n}\n\nexport const drawTable = (ctx: CanvasRenderingContext2D, params?: DrawCircleParams) => {\n    drawCircle(ctx, {\n        x: centerX,\n        y: centerY,\n        radius: R,\n        color: 'blue',\n        border: 'black',\n        text: 'philosophers table',\n        ...params,\n    })\n}\n\nexport const clearCanvas = (ctx: CanvasRenderingContext2D) => {\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT) // clear canvas\n}\n","export const R = 150\nexport const RADIUS_FORK = 20\nexport const RADIUS_PHILOSOPHER = 30\nexport const CANVAS_WIDTH = 500\nexport const CANVAS_HEIGHT = 500\nexport const centerX = CANVAS_WIDTH / 2\nexport const centerY = CANVAS_HEIGHT / 2\n","import { RADIUS_FORK, RADIUS_PHILOSOPHER } from '../constants'\nimport { Model } from '../models'\nimport { Sides } from '../typings/data'\nimport { inCircle } from '../utils'\nimport { View } from '../views'\n\nexport namespace Controller {\n    export class MainController {\n        self = this\n        model: Model.MainModel\n        view: View.MainView\n        constructor(model: Model.MainModel, view: View.MainView) {\n            this.model = model\n            this.view = view\n        }\n\n        canvasClickListener = (event: MouseEvent) => {\n            const { offsetX, offsetY } = event\n            this.model.philosophers.forEach((philosopher) => {\n                const { coords } = philosopher\n                if (inCircle(coords.x, coords.y, offsetX, offsetY, RADIUS_PHILOSOPHER)) {\n                    this.model.clearPhilosopherSelection()\n                    this.model.currentPhilosopher = philosopher\n                }\n            })\n\n            if (this.model.currentPhilosopher) {\n                this.model.forks.forEach((fork, i) => {\n                    const { coords } = fork\n                    if (inCircle(coords.x, coords.y, offsetX, offsetY, RADIUS_FORK)) {\n                        const adjacentForkLeft = this.model.currentPhilosopher.forkLeft === i\n                        const adjacentForkRight = this.model.currentPhilosopher.forkRight === i\n                        if (adjacentForkLeft) {\n                            this.model.pickUpFork(Sides.LEFT)\n                        } else if (adjacentForkRight) {\n                            this.model.pickUpFork(Sides.RIGHT)\n                        }\n                        this.model.updatePhilosopherStates()\n                    }\n                })\n            }\n        }\n\n        eatButtonClickListener = (event: MouseEvent) => {\n            this.model.startEating()\n        }\n    }\n}\n\n// eventListeners: (event) => {\n//             const clickCoords = { x: event.offsetX, y: event.offsetY }\n\n//             philosophers.forEach((philosopher, i) => {\n//                 const {\n//                     coords: { x, y },\n//                     state,\n//                 } = philosopher\n//                 if (state === States.SELECTED) {\n//                     selectedPhilosopher = philosopher\n//                 }\n//                 if (in_circle(x, y, clickCoords.x, clickCoords.y, RADIUS_PHILOSOPHER)) {\n//                     philosophers.forEach(\n//                         (philosopher) =>\n//                             (philosopher.state = philosopher.state === States.SELECTED ? undefined : philosopher.state)\n//                     )\n//                     philosopher.state = States.SELECTED\n//                     selectedPhilosopher = null\n//                 }\n//             })\n//             if (selectedPhilosopher !== null) {\n//                 const philosopher = selectedPhilosopher as Philosopher\n//                 forks.forEach((fork, i) => {\n//                     const {\n//                         coords: { x, y },\n//                     } = fork\n//                     if (in_circle(x, y, clickCoords.x, clickCoords.y, RADIUS_FORK)) {\n//                         const adjacentForkLeft = philosopher.forkLeft === i\n//                         const adjacentForkRight = philosopher.forkRight === i\n//                         if (adjacentForkRight || adjacentForkLeft) {\n//                             pickUpFork(selectedPhilosopher as Philosopher, adjacentForkLeft ? 'left' : 'right')\n//                         }\n//                     }\n//                 })\n//             }\n//         }\n//     }\n// }\n","import { Fork, Philosopher, States, Sides } from '../typings/data'\nimport { Action } from '../typings/logger'\nimport { Subject } from '../typings/model'\nimport { Observer } from '../typings/view'\nimport { centerX, centerY, R } from '../constants'\nimport { degreesToRadians, getRandomColor, logger } from '../utils'\n\nexport namespace Model {\n    export class MainModel implements Subject {\n        private _currentPhilosopher!: Philosopher\n        private observers: Observer[] = []\n        philosophers: Philosopher[] = [\n            {\n                name: 'aristoteles',\n                forkLeft: 3,\n                forkRight: 2,\n                interval: undefined,\n                priority: 1,\n                coords: { x: 0, y: 0 },\n                color: getRandomColor(),\n                fullness: 0,\n                isSelected: false,\n                state: States.HANGRY,\n            },\n            {\n                name: 'seneca',\n                forkLeft: 4,\n                forkRight: 3,\n                interval: undefined,\n                priority: 2,\n                coords: { x: 0, y: 0 },\n                color: getRandomColor(),\n                fullness: 0,\n                isSelected: false,\n                state: States.HANGRY,\n            },\n            {\n                name: 'plato',\n                forkLeft: 0,\n                forkRight: 4,\n                interval: undefined,\n                priority: 3,\n                coords: { x: 0, y: 0 },\n                color: getRandomColor(),\n                fullness: 0,\n                isSelected: false,\n                state: States.HANGRY,\n            },\n            {\n                name: 'derida',\n                forkLeft: 1,\n                forkRight: 0,\n                interval: undefined,\n                priority: 4,\n                coords: { x: 0, y: 0 },\n                color: getRandomColor(),\n                fullness: 0,\n                isSelected: false,\n                state: States.HANGRY,\n            },\n            {\n                name: 'sartre',\n                forkLeft: 2,\n                forkRight: 1,\n                interval: undefined,\n                priority: 5,\n                coords: { x: 0, y: 0 },\n                color: getRandomColor(),\n                fullness: 0,\n                isSelected: false,\n                state: States.HANGRY,\n            },\n        ]\n        forks: Fork[] = [\n            { heldBy: null, coords: { x: 0, y: 0 }, i: 0 },\n            { heldBy: null, coords: { x: 0, y: 0 }, i: 1 },\n            { heldBy: null, coords: { x: 0, y: 0 }, i: 2 },\n            { heldBy: null, coords: { x: 0, y: 0 }, i: 3 },\n            { heldBy: null, coords: { x: 0, y: 0 }, i: 4 },\n        ]\n\n        constructor() {\n            this.addPointsToForksAndPhilosophers()\n        }\n\n        /**\n         * model manipulation\n         */\n        clearPhilosopherSelection() {\n            this.philosophers.forEach((philosopher) => {\n                philosopher.isSelected = false\n            })\n            this.notifyObservers()\n        }\n\n        pickUpFork = (side: Sides) => {\n            const { forkLeft, forkRight } = this.currentPhilosopher\n            const forkIndex = side === Sides.LEFT ? forkLeft : forkRight\n            const fork = this.forks[forkIndex]\n            logger(Action.PICKUP_FORK_ATTEMPT, this.currentPhilosopher, side)\n            if (!fork.heldBy) {\n                logger(Action.PICKUP_FREE, this.currentPhilosopher, side)\n                fork.heldBy = this.currentPhilosopher\n            } else if (\n                this.currentPhilosopher.priority &&\n                fork.heldBy.priority &&\n                this.currentPhilosopher.priority < fork.heldBy.priority\n            ) {\n                logger(Action.PICKUP_FROM, this.currentPhilosopher, side, fork)\n                fork.heldBy = this.currentPhilosopher\n            } else if (this.currentPhilosopher.priority === fork.heldBy.priority) {\n                fork.heldBy = null\n                return\n            } else {\n                logger(Action.FORK_HELD, this.currentPhilosopher, side, fork)\n            }\n            this.notifyObservers()\n        }\n\n        startEating = () => {\n            if (this.currentPhilosopher.state === States.HOLDING_BOTH_FORKS) {\n                logger(Action.CAN_EAT, this.currentPhilosopher)\n                const pRefI = this.philosophers.findIndex((p) => this.currentPhilosopher.name === p.name)\n                if (pRefI === -1) return\n                const pRef = this.philosophers[pRefI]\n                this.currentPhilosopher.state = States.EATING\n                this.notifyObservers()\n                clearInterval((pRef.interval as unknown) as number)\n                pRef.interval = setInterval(() => {\n                    if (this.holdingTwoForksCheck(pRef) && pRef.fullness < 3) {\n                        pRef.fullness++\n                        this.notifyObservers()\n                        return\n                    }\n\n                    clearInterval((pRef.interval as unknown) as number)\n                    this.stoptEating(pRef)\n                }, 5000)\n            } else {\n                logger(Action.NO_EATING, this.currentPhilosopher)\n            }\n        }\n\n        stoptEating = (p: Philosopher) => {\n            p.state = States.HANGRY\n            this.forks[p.forkLeft].heldBy = undefined\n            this.forks[p.forkRight].heldBy = undefined\n            this.updatePhilosopherStates()\n            p.interval = setInterval(() => {\n                if (p.fullness > 0 && p.state !== States.EATING) {\n                    p.fullness--\n                    this.notifyObservers()\n                    return\n                }\n                clearInterval((p.interval as unknown) as number)\n            }, 5000)\n        }\n\n        updatePhilosopherStates() {\n            this.philosophers.forEach((p) => {\n                const holdingRight = this.holdingRightForkCheck(p)\n                const holdingLeft = this.holdingLeftForkCheck(p)\n                if ((!holdingRight || !holdingLeft) && p.state === States.EATING) {\n                    this.updatePhilosopherPriority(p)\n                }\n\n                if (holdingRight && holdingLeft && p.state !== States.EATING) {\n                    p.state = States.HOLDING_BOTH_FORKS\n                } else if (holdingLeft && !holdingRight) {\n                    p.state = States.HOLDING_LEFT_FORK\n                } else if (holdingRight && !holdingLeft) {\n                    p.state = States.HOLDING_RIGHT_FORK\n                } else if (p.state !== States.EATING) {\n                    p.state = States.HANGRY\n                }\n            })\n\n            this.notifyObservers()\n        }\n\n        updatePhilosopherPriority(ph: Philosopher) {\n            const lowestPriority = this.philosophers.reduce((acc, cur) => Math.max(acc, cur.priority), 0)\n            ph.priority = lowestPriority + 1\n            this.notifyObservers()\n        }\n\n        /**\n         * observable implementations\n         */\n        registerObserver(observer: Observer) {\n            this.observers.push(observer)\n            this.notifyObservers()\n        }\n\n        removeObserver(observer: Observer) {\n            this.observers = this.observers.filter((o) => o !== observer)\n        }\n\n        notifyObservers() {\n            this.observers.forEach((observer) => observer.update(this))\n        }\n\n        /**\n         * Private methods\n         */\n        private addPointsToForksAndPhilosophers() {\n            let angle: number = 0\n            this.philosophers.forEach((philosopher, i) => {\n                angle = i * (360 / this.philosophers.length)\n                const x1 = centerX + R * Math.cos(degreesToRadians(angle))\n                const y1 = centerY + R * Math.sin(degreesToRadians(angle))\n                const x2 = centerX - (x1 - centerX)\n                const y2 = centerY - (y1 - centerY)\n                philosopher.coords.x = x1\n                philosopher.coords.y = y1\n                this.forks[i].coords.x = x2\n                this.forks[i].coords.y = y2\n            })\n        }\n\n        private holdingTwoForksCheck(p: Philosopher) {\n            return this.holdingLeftForkCheck(p) && this.holdingRightForkCheck(p)\n        }\n\n        private holdingRightForkCheck(p: Philosopher) {\n            return this.forks[p.forkRight].heldBy === p\n        }\n\n        private holdingLeftForkCheck(p: Philosopher) {\n            return this.forks[p.forkLeft].heldBy === p\n        }\n\n        /**\n         * GETTERS / SETTERS\n         */\n        set currentPhilosopher(philosopher: Philosopher) {\n            philosopher.isSelected = true\n            this._currentPhilosopher = philosopher\n            this.notifyObservers()\n        }\n\n        get currentPhilosopher() {\n            return this._currentPhilosopher\n        }\n    }\n}\n","export enum States {\n    HOLDING_BOTH_FORKS = 'HOLDING_BOTH_FORKS',\n    HOLDING_RIGHT_FORK = 'HOLDING_RIGHT_FORK',\n    HOLDING_LEFT_FORK = 'HOLDING_LEFT_FORK',\n    EATING = 'EATING',\n    HANGRY = 'HANGRY',\n}\n\nexport enum Sides {\n    LEFT = 'LEFT',\n    RIGHT = 'RIGHT',\n}\n\nexport interface coords {\n    x: number\n    y: number\n}\n\nexport interface Philosopher {\n    name: string\n    forkLeft: number\n    forkRight: number\n    interval: undefined | number | NodeJS.Timeout\n    coords: coords\n    color: string\n    fullness: number\n    isSelected: boolean\n    state: States\n    priority: number\n}\n\nexport interface Fork {\n    heldBy: undefined | null | Philosopher\n    coords: coords\n    i: number\n}\n","export enum Action {\n    CAN_EAT = 'CAN_EAT 😊',\n    NO_EATING = 'NO_EATING 🥺',\n    EATING = 'EATING 🍔',\n    PICKUP_FORK_ATTEMPT = 'PICKUP_FORK_ATTEMPT ⏳',\n    PICKUP_FREE = 'PICKUP_FREE ✅',\n    PICKUP_FROM = 'PICKUP_FROM 🔄',\n    FORK_HELD = 'FORK_HELD ❌',\n}\n","import { Fork, Philosopher, Sides, States } from '../typings/data'\nimport { Action } from '../typings/logger'\n\nexport function degreesToRadians(degrees: number) {\n    var pi = Math.PI\n    return degrees * (pi / 180)\n}\n\nexport const inCircle = (x1: number, y1: number, x2: number, y2: number, radius: number) =>\n    Math.abs(x1 - x2) < radius && Math.abs(y1 - y2) < radius\n\nexport function getRandomColor() {\n    function c() {\n        var hex = Math.floor(Math.random() * 256).toString(16)\n        return ('0' + String(hex)).substr(-2) // pad with zero\n    }\n    return '#' + c() + c() + c()\n}\n\nexport const logger = (Tag: Action, philosopher: Philosopher, side?: Sides, fork?: Fork) => {\n    let message: String = Tag\n    if ((Tag === Action.PICKUP_FORK_ATTEMPT, Tag === Action.PICKUP_FREE)) {\n        message = `${side} side ${philosopher.name}`\n    } else if (fork && Tag === Action.PICKUP_FROM) {\n        message = `${side} side ${philosopher.name} took from ${fork.heldBy ? fork.heldBy.name : ''}`\n    } else if (fork && Tag === Action.FORK_HELD) {\n        message = `${side} side held by ${fork.heldBy ? fork.heldBy.name : ''}`\n    } else {\n        message = `${philosopher.name}`\n    }\n    console.log(Tag, message)\n}\n\nexport const getBorderColor = (p: Philosopher): string => {\n    let color = 'white'\n    if (p.isSelected) {\n        return 'yellow'\n    }\n    switch (p.state) {\n        case States.EATING:\n            color = 'purple'\n            break\n        case States.HOLDING_BOTH_FORKS:\n            color = 'green'\n            break\n        case States.HOLDING_LEFT_FORK:\n            color = 'pink'\n            break\n        case States.HOLDING_RIGHT_FORK:\n            color = 'pink'\n            break\n    }\n    return color\n}\n","import { Observer, EventListenerView } from '../typings/view'\nimport { clearCanvas, drawTable } from '../animation'\nimport { drawFork, drawPhilosopher } from '../animation/implementations'\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from '../constants'\nimport { Model } from '../models'\nimport { Philosopher, States } from '../typings/data'\n\nexport namespace View {\n    class Canvas implements Observer, EventListenerView {\n        element = document.getElementById('myCanvas') as HTMLCanvasElement\n        constructor() {\n            this.element.style.backgroundColor = 'grey'\n            this.element.width = CANVAS_WIDTH\n            this.element.height = CANVAS_HEIGHT\n        }\n\n        update(model: Model.MainModel) {\n            const ctx = this.element.getContext('2d') as CanvasRenderingContext2D\n            ctx.globalCompositeOperation = 'destination-over'\n            clearCanvas(ctx)\n            model.philosophers.forEach((philosopher, i) => {\n                drawPhilosopher(ctx, philosopher)\n                drawFork(ctx, model.forks[i])\n            })\n            drawTable(ctx)\n        }\n\n        addClickEventListener(handler: (this: HTMLCanvasElement, ev: MouseEvent) => any) {\n            this.element.addEventListener('click', handler)\n        }\n    }\n\n    class EatButton implements EventListenerView, Observer {\n        element = document.getElementById('eat') as HTMLButtonElement\n        id: string = 'eat'\n        disabled: boolean = false\n        constructor() {}\n\n        addClickEventListener(handler: (this: HTMLButtonElement, ev: MouseEvent) => any) {\n            this.element.addEventListener('click', handler)\n        }\n\n        update(model: Model.MainModel) {\n            if (model.currentPhilosopher) {\n                this.element.innerText = `🍔 eat ${model.currentPhilosopher.name} 🍔`\n                this.id = model.currentPhilosopher.name\n            }\n        }\n    }\n\n    class InfoTable implements Observer {\n        headers: (keyof Philosopher)[] = ['name', 'forkLeft', 'forkRight', 'fullness', 'priority', 'state']\n        element = document.getElementById('info-table') as HTMLButtonElement\n        constructor() {}\n\n        update(model: Model.MainModel) {\n            this.element.innerHTML = ''\n            const header = this.createHeader()\n            this.element.appendChild(header)\n            model.philosophers.forEach((philosopher) => {\n                const row = this.createRow(philosopher)\n                this.element.appendChild(row)\n            })\n        }\n\n        private createHeader() {\n            const tr = document.createElement('tr')\n            this.headers.forEach((element) => {\n                const td = document.createElement('th')\n                td.innerText = element\n                tr.appendChild(td)\n            })\n            return tr\n        }\n\n        private createRow(p: Philosopher) {\n            const tr = document.createElement('tr')\n            this.headers.forEach((header) => {\n                const td = document.createElement('td')\n                this.setBackgroundColor(td, p)\n                const property = p[header]\n                if (property?.toString()) {\n                    console.log(property)\n                    td.innerText = property?.toString()\n                }\n                tr.appendChild(td)\n            })\n            return tr\n        }\n\n        private setBackgroundColor(td: HTMLTableDataCellElement, p: Philosopher) {\n            if (p.state === States.EATING) {\n                td.style.backgroundColor = 'lightgreen'\n            } else if (p.state === States.HANGRY) {\n                td.style.backgroundColor = 'lightcoral'\n            } else {\n                td.style.backgroundColor = 'lightsalmon'\n            }\n        }\n    }\n\n    export class MainView {\n        canvas: Canvas\n        eatButton: EatButton\n        table: InfoTable\n        constructor() {\n            this.canvas = new Canvas()\n            this.eatButton = new EatButton()\n            this.table = new InfoTable()\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"sourceRoot":""}